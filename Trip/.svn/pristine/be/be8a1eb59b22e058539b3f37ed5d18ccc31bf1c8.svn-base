package com.project.trip.member.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.SecureRandom;

import javax.annotation.Resource;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.websocket.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.project.trip.admin.service.AdminService;
import com.project.trip.member.service.MemberService;
import com.project.trip.member.vo.MemberVO;

@Controller
@RequestMapping("/member")
public class MemberController {
		
	@Resource(name = "memberService")
	private MemberService memberService;

	@Resource(name = "adminService")
	private AdminService adminService;
	
	@Autowired
	private JavaMailSender mailSender;
	
	@GetMapping("/loginForm")
	public String loginForm(Model model) {
		//최상단 메뉴 리스트 보내기
		model.addAttribute("menuList", adminService.selectMenuList());
		return "member/login";
	}
	
	@GetMapping("/joinForm")
	public String joinForm(Model model) {
		model.addAttribute("menuList", adminService.selectMenuList());
		return "member/join";
	}
	
	@GetMapping("/loginTempForm")
	public String loginTempForm(Model model) {
		model.addAttribute("menuList", adminService.selectMenuList());
		return "member/login_temp";
	}
	
	@GetMapping("/findIdForm")
	public String findIdForm(Model model) {
		model.addAttribute("menuList", adminService.selectMenuList());
		return "member/find_id";
	}
	
	@GetMapping("/findPwForm")
	public String findPwForm(Model model) {
		model.addAttribute("menuList", adminService.selectMenuList());
		return "member/find_pw";
	}
	
	@PostMapping("/join")
	public String join(MemberVO memberVO) {
		memberService.join(memberVO);
		return "member/login";
	}
	
	@ResponseBody
	@PostMapping("/login")
	public boolean login(MemberVO memberVO, HttpSession session) {
		MemberVO result = memberService.login(memberVO);
		
		if(result != null) {
			session.setAttribute("loginInfo", result);
			
		}
		return result == null ? false : true;
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.removeAttribute("loginInfo");
		return "redirect:/member/loginForm";
	}
	
	@ResponseBody
	@PostMapping("/selectId")
	public boolean selectId(MemberVO memberVO) {
		String result = memberService.selectId(memberVO);
		
		return result == null ? false : true;
	}
	
	@ResponseBody
	@PostMapping("/findId")
	public String findId(MemberVO memberVO) {
		String result = memberService.findId(memberVO);
		
		return result;
	}
	
	@ResponseBody
	@PostMapping("/sendMail")
	public void sendMail(MemberVO memberVO, HttpServletResponse response) {
		String memEmail = memberService.selectId(memberVO);
		String memName = memberService.selectName(memberVO);
		String memCertiNum = getCertiNum();
		
		Cookie cookie = new Cookie("certiNum", memCertiNum);
		cookie.setMaxAge(60 * 3);//초단위
		response.addCookie(cookie);
		
		try {
			MimeMessage message = mailSender.createMimeMessage();
			MimeMessageHelper messageHelper;
				
			messageHelper = new MimeMessageHelper(message, true, "UTF-8");
			messageHelper.setFrom("ayb0675@gmail.com");
			messageHelper.setTo("ayb3785@gmail.com");
			messageHelper.setSubject("인증번호");
			messageHelper.setText(memName + "님의 인증번호는 " + memCertiNum + "입니다."  );

			mailSender.send(message);
		} catch (MessagingException e) {
			e.printStackTrace();
		}
		
		
		
	}
	
	public String getCertiNum() {
		String lowerCase = "abcdefghijklmnopqrstuvwxyz";
		String upperCase = lowerCase.toUpperCase();
		String number = "0123456789";
		String baseStr = lowerCase + upperCase + number;
		
		
		StringBuilder certiNum = new StringBuilder();
		
		for(int i = 0 ; i < 8 ; i++) {
			SecureRandom rand = new SecureRandom();
			int index = rand.nextInt(baseStr.length());
			char c = baseStr.charAt(index);
			certiNum.append(String.valueOf(c));
		}
		
		return certiNum.toString();
	}
	@ResponseBody
	@PostMapping("/certification")
	public boolean certification(HttpServletRequest request, String memCertiNum) {
		Cookie[] cookies = request.getCookies();
		String certNum = null;
		if(cookies!=null){
	        for (Cookie c : cookies) {
	            String name = c.getName(); // 쿠키 이름 가져오기
	            String value = c.getValue(); // 쿠키 값 가져오기
	            if (name.equals("certiNum")) {
	            	certNum = value;
	            }
	        }
	    }
		
		if(certNum.equals(memCertiNum) ) {
			return true;
		}
		else {
			return false;
		}

	}
	
	@PostMapping("/findPw")
	public void findPw() {
		
	}
	
}
