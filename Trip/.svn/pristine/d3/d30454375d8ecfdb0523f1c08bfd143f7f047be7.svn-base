package com.project.trip.admin.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.project.trip.admin.service.AdminService;
import com.project.trip.admin.vo.BookSearchVO;
import com.project.trip.admin.vo.SideMenuVO;
import com.project.trip.admin.vo.SlideImageVO;
import com.project.trip.buy.service.BuyService;
import com.project.trip.item.service.ItemService;
import com.project.trip.item.vo.ImageVO;
import com.project.trip.item.vo.ItemVO;
import com.project.trip.util.TripUtil;

@Controller
@RequestMapping("/admin")
public class AdminController {
		
	@Resource(name = "adminService")
	private AdminService adminService;
	
	@Resource(name = "itemService")
	private ItemService itemService;
	
	@Resource(name = "buyService")
	private BuyService buyService;
	
	
	//관리자 메뉴 클릭시 나오는 페이지 -> 상품등록 페이지
	@GetMapping("/itemManage")
	public String adminMenu(Model model, BookSearchVO bookSearchVO, SideMenuVO sideMenuVO) {
		
		return "redirect:/admin/regItem";
	}
	
	
		
		//상품목록 페이지
			@GetMapping("/itemList")
			public String itemList(Model model, SideMenuVO sideMenuVO, ItemVO itemVO) {
				
				model.addAttribute("itemList", itemService.selectItemList(itemVO));
				
				return "admin/item_list_manage";
			}
			
			//상품등록 페이지 이동
			@GetMapping("/regItem")
			public String regItem(Model model, SideMenuVO sideMenuVO, BookSearchVO bookSearchVO) {
				
				
				//이달의 1일과 오늘 날짜를 구함
				String firstDate = TripUtil.getStartDateToString();
				String nowDate = TripUtil.getNowDateToString();
				
				if(bookSearchVO.getSearchFromDate() == null) {
					bookSearchVO.setSearchFromDate(firstDate);
				}
				
				
				if(bookSearchVO.getSearchToDate() == null) {
					bookSearchVO.setSearchToDate(nowDate);
				}

				model.addAttribute("areaList", adminService.selectItemCategory());
				
				return "admin/reg_item";
			}
			
			//상품등록 페이지에서 등록버튼 클릭
			@PostMapping("/regItem")
			public String regItem(ItemVO itemVO,  MultipartHttpServletRequest multi, Model model, SideMenuVO sideMenuVO) {

				//이미지 정보를 세팅할 공간(List) 생성
				List<ImageVO> imgList = new ArrayList<ImageVO>();
				
				//이미지 삽입 쿼리 실행 시 빈값을 채워줄 객체
				ImageVO imageVO = new ImageVO();
				
				//다음에 들어갈 IMG_CODE 값을 조회
				int nextImgCode = adminService.selectNextImgCode();
				
				//다음에 들어갈 ITEM_CODE 값을 조회
				String NextItemCode = adminService.selectNextItemCode();
				
				//이미지 파일 업로드
				Iterator<String> inputTagNames = multi.getFileNames();
				
				//첨부파일이 저장될 위치 지정
				String uploadPath = "D:\\Git\\workspaceSTS\\Trip\\src\\main\\webapp\\resources\\images\\";
				
				while(inputTagNames.hasNext()) {
					//"mainImg", "subImg"
					String inputTagName = inputTagNames.next();
					
					//다중 첨부...
					if(inputTagName.equals("subImg")) {
						List<MultipartFile> fileList = multi.getFiles(inputTagName);
						
						for(MultipartFile file : fileList) {
							
							//첨부하고자 하는 파일명 (원본파일명)
							String originFileName = file.getOriginalFilename();
							
							if(!originFileName.equals("")) {
								//첨부할 파일명
								String attachedFileName = System.currentTimeMillis() + "_" + originFileName;
								
								try {
									file.transferTo(new File(uploadPath + attachedFileName));
									
									ImageVO vo = new ImageVO();
									vo.setImgCode(nextImgCode++);
									vo.setOriginImgName(originFileName);
									vo.setAttachedImgName(attachedFileName);
									vo.setIsMain("N");
									vo.setItemCode(NextItemCode);
									imgList.add(vo);
									
								} catch (IllegalStateException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
						}
					}
					//단일 첨부...
					else {
						//name이 "mainImg"인 input태그의 파일 정보를 가져 옴.
						MultipartFile file = multi.getFile(inputTagName);
						
						//첨부하고자 하는 파일명 (원본파일명)
						String originFileName = file.getOriginalFilename();
						
						
						if(!originFileName.equals("")) {
							//첨부할 파일명
							String attachedFileName = System.currentTimeMillis() + "_" + originFileName;
							
							//파일 업로드
							//매개변수로 경로 및 파일명을 넣어줌
							try {
								file.transferTo(new File(uploadPath + attachedFileName));
								
								ImageVO vo = new ImageVO();
								vo.setImgCode(nextImgCode++);
								vo.setOriginImgName(originFileName);
								vo.setAttachedImgName(attachedFileName);
								vo.setIsMain("Y");
								vo.setItemCode(NextItemCode);
								
								
								imgList.add(vo);
								
							} catch (IllegalStateException e) {
								e.printStackTrace();
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
					}
				}
				
				
				itemVO.setItemCode(NextItemCode);
				imageVO.setImageList(imgList);
				adminService.regItem(itemVO, imageVO);
				
				return "redirect:/admin/itemManage";
			}
			
		//선택 상품 삭제
		@GetMapping("deleteSelectedItem")
		public String deleteSelectedItem(ItemVO itemVO, SideMenuVO sideMenuVO) {
			
			//폴더에 있는 이미지 삭제
			String filePath = "D:\\Git\\workspaceSTS\\Trip\\src\\main\\webapp\\resources\\images\\";
			List<ImageVO> image = itemService.selectImageList(itemVO);
			
			for(ImageVO img : image) {
				img.getAttachedImgName();
				File file = new File(filePath + img.getAttachedImgName());
				System.out.println(img.getAttachedImgName());
				if(file.exists()) {
					file.delete();
				}
			}
			//상품 삭제
			adminService.deleteSelectedItem(itemVO);
			
			return "redirect:/admin/itemList";
		}
		
	//메인화면 이미지 등록 페이지 이동
	@GetMapping("/regImage")
	public String regImage(SlideImageVO slideImageVO) {
		
	
		
		return "admin/reg_image";
	}
	
	//메인화면 슬라이드 이미지 등록
	@PostMapping("/regImage")
	public String regImage(MultipartHttpServletRequest multi, Model model, SlideImageVO slideImageVO) {
		
		//이미지 파일 업로드
		//태그명이 file인것들을 불러온다
		Iterator<String> inputTagNames = multi.getFileNames();
		
		//첨부파일이 저장될 위치 지정
		String uploadPath = "D:\\Git\\workspaceSTS\\Trip\\src\\main\\webapp\\resources\\images\\slide\\";
		
		String inputTagName = inputTagNames.next();
		
		List<SlideImageVO> imageSize = adminService.selectSlideList();
		
		int index = adminService.selectImageIndex();
		
		if(imageSize.size() < 5) {
		
			
		if(inputTagName.equals("slideImage")) {
			
	
			//name이 "mainImg"인 input태그의 파일 정보를 가져 옴.
			MultipartFile file = multi.getFile(inputTagName);
			
			//첨부하고자 하는 파일명 (원본파일명)
			String originFileName = file.getOriginalFilename();
			
			
			String extension = originFileName.substring(originFileName.length()-4, originFileName.length());
			
			
			
			if(!originFileName.equals("")) {
				//첨부할 파일명
				String attachedFileName = "slideImage" + index + extension;
				
				//파일 업로드
				//매개변수로 경로 및 파일명을 넣어줌
				try {
					file.transferTo(new File(uploadPath + attachedFileName));
					
					slideImageVO.setOriginImgName(originFileName);
					slideImageVO.setAttachedImgName(attachedFileName);
					
					
					
				} catch (IllegalStateException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		
		}
		adminService.regSlideImage(slideImageVO);
		}
			
		return "redirect:/admin/regImage";
		
	}
	
	//슬라이드 이미지 수정 페이지
	@GetMapping("/updateImage")
	public String updateImage(Model model) {
		
		model.addAttribute("imageList", adminService.selectSlideList());
		
		return "admin/update_image";
	}
	
	//슬라이드 이미지 수정
	@PostMapping("/updateImage")
	public String updateImage(SlideImageVO slideImageVO, MultipartHttpServletRequest multi) {
		
		//이미지 파일 업로드
		//태그명이 file인것들을 불러온다
		Iterator<String> inputTagNames = multi.getFileNames();
		
		//첨부파일이 저장될 위치 지정
		String uploadPath = "D:\\Git\\workspaceSTS\\Trip\\src\\main\\webapp\\resources\\images\\slide\\";
		
		String inputTagName = inputTagNames.next();
		
		List<SlideImageVO> list = adminService.selectSlideList();
		int index = adminService.selectImageIndex();
		
		/*
		 * for(int i = 0 ; i > list.size() ; i ++) {
		 * 
		 * if(list.get(i).getImageIndex() == index && index < 5) { index++; } else {
		 * index--; }
		 * 
		 * }
		 */
	
		if(inputTagName.equals("updateImg")) {
			
	
			//name이 "updateImg"인 input태그의 파일 정보를 가져 옴.
			MultipartFile file = multi.getFile(inputTagName);
			
			//첨부하고자 하는 파일명 (원본파일명)
			String originFileName = file.getOriginalFilename();
			
			
			
			String extension = originFileName.substring(originFileName.length()-4, originFileName.length());
			
			
			if(!originFileName.equals("")) {
				//첨부할 파일명
				String attachedFileName = "slideImage" + index + extension;
				
				//파일 업로드
				//매개변수로 경로 및 파일명을 넣어줌
				try {
					file.transferTo(new File(uploadPath + attachedFileName));
					
					slideImageVO.setOriginImgName(originFileName);
					slideImageVO.setAttachedImgName(attachedFileName);
					
					
					
				} catch (IllegalStateException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		
		}
		
		adminService.updateSlideImage(slideImageVO);
		
		return "redirect:/admin/updateImage";
	}
	
	//회원관리 페이지 이동
	@GetMapping("/memberManage")
	public String memberManage(Model model, SideMenuVO sideMenuVO) {
		
		model.addAttribute("memberList", adminService.selectMemberList());
		
		return "admin/member_manage";
	}
	
	//예약관리 페이지 이동
	@GetMapping("/bookManage")
	public String bookManage(Model model, SideMenuVO sideMenuVO) {
		
		model.addAttribute("bookList", buyService.selectBookList());
		
		return "admin/book_list";
	}
	
	
	
	//회원 상세정보 페이지
	@GetMapping("memberDetail")
	public String memberDetail() {
		
		
		return "admin/member_detail";
	}
	
	//상담 및 문의관리 페이지
	@GetMapping("/helpManage")
	public String helpManage() {
		
		
		
		return "admin/help_manage";
	}
	
}
