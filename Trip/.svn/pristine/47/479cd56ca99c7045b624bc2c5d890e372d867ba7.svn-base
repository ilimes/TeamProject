$('#selectEmail').change(function(){
	 $("#selectEmail option:selected").each(function () {
		 if($(this).val()== '1'){
			 	$("#memEmail").val('');
			 	$("#memEmail").attr("readonly",false);
		 }else{ 
				$("#memEmail").val($(this).text());
				$("#memEmail").attr("readonly",true);
		 }
  }); 
});


$.validator.addMethod("idCk",  function( value, element ) {

return this.optional(element) ||  /^[a-z0-9_-]{5,20}$/.test(value);


}); 
$.validator.addMethod("passwordCk",  function( value, element ) {

return this.optional(element) ||  /^.*(?=^.{8,16}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=_-]).*$/.test(value);

}); 

$('#joinForm').validate({
	//true : 유효성 검사 성공 시에도 submit이 되지 않음.
	debug: false,
	
	//유효성 검사 대상 설정
	rules: {
		memIds: { //input 태그의 name 속성으로 검사 대상을 지정
			required: true,
			idCk: true
		},
		memPw:{
			required: true,
			passwordCk: true
		},
		memPwChk:{
			required: true,
			equalTo: '#memPw',
			passwordCk: true
		},
		memName:{
			required: true
		},
		memBirthday:{
			required: true,
			minlength: 8,
			maxlength: 8
		},
		memAddrs:{
			required: true
		},
		memAddrDetail:{
			required: true
		},
		memTell1:{
			required: true
		},
		memTell2:{
			required: true
		}
	},
	//유효성 검사 실패 시 나타날 메세지 설정
	messages: {
		memIds: { //input 태그의 name 속성으로 검사 대상을 지정
			required: "아이디(이메일)를 입력해주세요.",
			idCk: "5~20자의 영문 소문자, 숫자와 특수기호(_),(-)만 사용 가능합니다."
		},
		memPw:{
			required: "비밀번호를 입력해주세요.",
			passwordCk: "8~16자 영문 대소문자, 숫자, 특수문자를 사용하세요."
		},
		memPwChk:{
			required: "비밀번호를 입력해주세요.",
			equalTo: '입력하신 비밀번호가 일치하지 않습니다.',
			passwordCk: "8~16자 영문 대소문자, 숫자, 특수문자를 사용하세요."
		},
		memName:{
			required: "이름을 입력해주세요."
		},
		memBirthday:{
			required: "생년월일을 입력해주세요.(예:19900101)",
			minlength: "생년월일을 입력해주세요.(예:19900101)",
			maxlength: "생년월일을 입력해주세요.(예:19900101)"
		},
		memAddrs:{
			required: "주소를 입력해주세요."
		},
		memAddrDetail:{
			required: "상세주소를 입력해주세요."
		},
		memTell1:{
			required: "연락처1을 입력해주세요."
		},
		memTell2:{
			required: "연락처2를 입력해주세요."
		}
	},
	//유효성 실패 시 추가할 태그(default:lable)
	errorElement: 'div',
	//유효성 검사 실패 시 메세지 출력 방식
	errorPlacement: function(error, element) {
		//element:유효성 검사 실패한 태그(input)
		//error:검사 실패 시 자동 추가되는 태그
		error.insertAfter($(element).closest("div"));
		error.css('color', 'red');
		//error.css('font-size', '12px');
	},
	//유효성 검사 실패 시 디자인
	highlight: function ( element, errorClass, validClass ) {
      $(element).addClass('is-invalid').removeClass('is-valid');
   },
   //유효성 검사 성공 시 디자인
   unhighlight: function (element, errorClass, validClass) {
      $(element).addClass('is-valid').removeClass('is-invalid');
   },
	//유효성 검사 성공 시 실행
	submitHandler: function(form) {
		//선택한 태그의 name 속성을 memTells로 변경
		$('#memAddrDetail').attr('name', 'memAddrs');
		$('#memTell1').attr('name', 'memTells');
		$('#memTell2').attr('name', 'memTells');
		
		form.submit();   //유효성 검사를 통과시 전송
	}
});

function sample4_execDaumPostcode() {
          new daum.Postcode({
              oncomplete: function(data) {
                  var roadAddr = data.roadAddress; // 도로명 주소 변수
				  document.getElementById("memZipCode").value = data.zonecode;
                  document.getElementById("memAddr").value = roadAddr;
                  
              }
          }).open();
      }

function idChkBtn() {
	var id = document.getElementById('memId').value + '@' + document.getElementById('memEmail').value;
	$.ajax({
		url: '/member/selectId', //요청경로
		type: 'post',
		data: {'memId':id}, //필요한 데이터 '데이터이름':값
		success: function(result) {
			//ajax 실행 성공 후 실행할 코드 작성
			if(result){
				alert('중복된 아이디입니다. 다른 아이디를 입력하세요.');
			}
			else{
				alert('회원가입 가능한 아이디입니다.');
			}
				
		},
		error: function() {
			//ajax 실행 실패 시 실행되는 구간
			alert('실패');
		}
	});
	
}